{"version":3,"sources":["src/app/input-manager.js","src/gl-util.js","src/app/sim/steps/s1-pred-pos/shaders/pred-pos.vert","src/app/sim/steps/s1-pred-pos/shaders/pred-pos.frag","src/app/sim/steps/s1-pred-pos/index.js","src/app/sim/steps/s2-jank-frnn/index.js","src/app/sim/steps/s3-calc-lambda/shaders/calc-lambda.vert","src/app/sim/steps/s3-calc-lambda/shaders/calc-lambda.frag","src/app/sim/steps/s3-calc-lambda/index.js","src/app/sim/steps/s4-calc-dp/shaders/calc-dp.vert","src/app/sim/steps/s4-calc-dp/shaders/calc-dp.frag","src/app/sim/steps/s4-calc-dp/index.js","src/app/sim/steps/s5-update-pred-pos/shaders/update-pred-pos.vert","src/app/sim/steps/s5-update-pred-pos/shaders/update-pred-pos.frag","src/app/sim/steps/s5-update-pred-pos/index.js","src/app/sim/steps/s6-update-vel/shaders/update-vel.vert","src/app/sim/steps/s6-update-vel/shaders/update-vel.frag","src/app/sim/steps/s6-update-vel/shaders/visc-vort.vert","src/app/sim/steps/s6-update-vel/shaders/visc-vort.frag","src/app/sim/steps/s6-update-vel/index.js","src/app/sim/steps/s7-update-pos/shaders/update-pos.vert","src/app/sim/steps/s7-update-pos/shaders/update-pos.frag","src/app/sim/steps/s7-update-pos/index.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/index.js","src/app/sim/steps/s8-render-particles/shaders/render.vert","src/app/sim/steps/s8-render-particles/shaders/render.frag","src/app/sim/steps/s8-render-particles/index.js","src/app/sim/index.js","src/app/ui-interface.js","src/app/renderer.js","src/app/index.js","src/main.js"],"names":["EventManager","mouse","x","y","keys","Set","handlers","on_click","bind","on_mouse","on_scroll","init","window","addEventListener","removeEventListener","event","payload","forEach","h","handler","push","filter","e","offsetX","offsetY","Texture","gl","_tex","createTexture","args","texImage2D","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","bindTexture","Shader","type","source","id","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","Error","Program","name","vertSrc","fragSrc","inputs","vert","load","VERTEX_SHADER","frag","FRAGMENT_SHADER","pid","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attrs","uniforms","uniform_setters","attr","getAttribLocation","Object","entries","uniform","getUniformLocation","setter","loc","vertexAttribPointer","enableVertexAttribArray","call","useProgram","Buffer","to_half","floatView","Float32Array","int32View","Int32Array","buffer","val","bits","m","module","exports","app","sim","_pred_pos_prog","pred_pos_vsrc","pred_pos_fsrc","u_num_particles","u_dt","u_pos_buf","u_vel_buf","bindBuffer","ARRAY_BUFFER","buffers","particle_ids","UNSIGNED_SHORT","use","num_particles","s_params","dt","unuse","exec","fb","swap_fbo","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","textures","pred_pos","activeTexture","TEXTURE0","pos","TEXTURE1","vel","clearColor","clear","COLOR_BUFFER_BIT","viewport","drawArrays","POINTS","_pos_buf","_counts","_bins","_bin_start","_bin_count","bin","x_c","Math","trunc","bin_size","y_c","x_bins","Uint16Array","num_bins","Uint32Array","b","readPixels","RGBA","FLOAT","fill","i","bins","R32UI","RED_INTEGER","UNSIGNED_INT","bin_count","bin_start","_calc_lambda_prog","calc_lambda_vsrc","calc_lambda_fsrc","u_kernel_r","u_rest_density","u_relaxation","u_bin_size","u_x_bins","u_num_bins","u_pred_pos","u_bins","u_bin_count","u_bin_start","kernel_r","rest_density","relaxation","den","TEXTURE2","TEXTURE3","_calc_dp_prog","calc_dp_vsrc","calc_dp_fsrc","u_s_corr_dq_mult","u_s_corr_k","u_s_corr_n","u_lambda","s_corr_dq_mult","s_corr_k","s_corr_n","d_pos","TEXTURE4","_update_pred_pos_prog","update_pred_pos_vsrc","update_pred_pos_fsrc","u_d_pos","temp","_vel_update_prog","_visc_vort_prog","vel_update_vsrc","vel_update_fsrc","u_pred_pos_buf","visc_vort_vsrc","visc_vort_fsrc","u_vort_eps","u_visc_c","u_vel","vort_eps","visc_c","TEXTURE5","_pos_update_prog","pos_update_vsrc","pos_update_fsrc","EPSILON","ARRAY_TYPE","Array","RANDOM","random","setMatrixArrayType","degree","PI","toRadian","a","equals","abs","max","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","tempA","tempB","cosine","acos","zero","div","dist","sqrDist","sqrLen","vec","stride","offset","count","fn","arg","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","_render_prog","_mat_view","_mat_proj","target_x","r_params","target_y","camera","canvas","clientWidth","clientHeight","render_vsrc","render_fsrc","u_radius","u_vpheight","u_view","u_proj","u_camera","is_mac","radius","input","renderer","DEPTH_BUFFER_BIT","next_id","particles","params_dirty","framebuffer","framebuffers","y_bins","steps","jank_frnn","calc_lambda","calc_dp","update_pred_pos","update_vel","update_pos","render_particles","compute_bounds","positions","generate_particles","o_x","o_y","d_x","d_y","info","init_buffers","init_textures","init_programs","init_framebuffers","num_w_particles","num_h_particles","offset_x","offset_y","createBuffer","bufferData","STATIC_DRAW","RG32F","RG","R32F","RED","createFramebuffer","reset_pending","reset","render","document","createElement","setAttribute","style","position","border","color","padding","fontSize","body","appendChild","pause_button","innerHTML","reset_button","info_elem","_info","on_pause","on_reset","paused","run","pause","JSON","stringify","running","avg_fps","t_curr","t_last","on_frame","on_resize","getExtension","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","requestAnimationFrame","step","PBDApplication","getElementById","initialized","test","navigator","platform","InputManager","info_box","sample_performance","on_mousemove","on","state","getContext","start","setTimeout","tLast","fps","toFixed","sync","main"],"mappings":"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","file":"main.aa6cc7d0.js","sourceRoot":"..","sourcesContent":["export default class EventManager {\n  constructor() {\n    this.mouse = {\n      x: 0,\n      y: 0\n    };\n    this.keys = new Set();\n\n    this.handlers = {};\n    \n    this.on_click = this.on_click.bind(this);\n    this.on_mouse = this.on_mouse.bind(this);\n    this.on_scroll = this.on_scroll.bind(this);\n\n    this.init();\n  }\n\n  init() {\n    window.addEventListener('mousemove', this.on_mouse);\n  }\n\n  destroy() {\n    window.removeEventListener('mousemove', this.on_mouse);\n  }\n\n  emit(event, payload) {\n    if (!this.handlers[event])\n      return;\n\n    this.handlers[event].forEach(h => h(this, payload));\n  }\n\n  on(event, handler) {\n    if (!this.handlers[event])\n      this.handlers[event] = [];\n\n    this.handlers[event].push(handler);    \n  }\n\n  remove(event, handler) {\n    if (!this.handlers[event])\n      return;\n\n    this.handlers[event] = this.handlers[event].filter(h => h !== handler);\n  }\n\n  on_click() {\n\n  }\n\n  on_mouse(e) {\n    this.mouse.x = e.offsetX;\n    this.mouse.y = e.offsetY;\n\n    this.handlers['mousemove'].forEach(h => h(this, e));\n  }\n\n  on_scroll() {\n\n  }\n}","export class Texture {\n  constructor(gl, ...args) {\n    this.gl = gl;\n    this._tex = gl.createTexture();\n    this.bind();\n    gl.texImage2D(gl.TEXTURE_2D, ...args);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n\n  bind() {\n    const { gl, _tex } = this;\n    gl.bindTexture(gl.TEXTURE_2D, _tex);\n  }\n\n  unbind() {\n    const { gl } = this;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n}\n\nclass Shader {\n  static load(gl, type, source) {\n    const id = gl.createShader(type);\n    gl.shaderSource(id, source);\n    gl.compileShader(id);\n\n    if (gl.getShaderParameter(id, gl.COMPILE_STATUS))\n      return id;\n\n    const log = gl.getShaderInfoLog(id);\n    gl.deleteShader(id);\n    throw new Error(`An error occurred compiling a shader: ${log}`);\n  }\n}\n\nexport class Program {\n  constructor(gl, name, vertSrc, fragSrc, inputs) {\n    this.name = name;\n    this.vert = Shader.load(gl, gl.VERTEX_SHADER, vertSrc);\n    this.frag = Shader.load(gl, gl.FRAGMENT_SHADER, fragSrc);\n\n    const pid = gl.createProgram();\n    gl.attachShader(pid, this.vert);\n    gl.attachShader(pid, this.frag);\n    gl.linkProgram(pid);\n\n    if (!gl.getProgramParameter(pid, gl.LINK_STATUS))\n      throw new Error(`Unable to link the shader program ${name}: ${gl.getProgramInfoLog(pid)}`);\n\n    this.attrs = {};\n    this.uniforms = {};\n    this.uniform_setters = {};\n\n    inputs.attrs && inputs.attrs.forEach(attr => {\n      this.attrs[attr] = gl.getAttribLocation(pid, attr);\n      if (this.attrs[attr] === -1)\n        throw new Error(`program attr \"${attr}\" not found in program \"${this.name}\"`);\n    });\n\n    inputs.uniforms && Object.entries(inputs.uniforms).forEach(([uniform, type]) => {\n      this.uniforms[uniform] = gl.getUniformLocation(pid, uniform);\n      if (this.uniforms[uniform] === -1)\n        throw new Error(`program uniform \"${uniform}\" not found in program \"${this.name}\"`);\n\n      const setter = gl[`uniform${type}`];\n      if (typeof setter === 'undefined')\n        throw new Error(`type for program uniform \"${uniform}\" not recognized in program \"${this.name}\"`);\n\n      this.uniform_setters[uniform] = setter;\n    });\n\n    this.gl = gl;\n    this.pid = pid;\n  }\n\n  attr(name, ...args) {\n    const loc = this.attrs[name];\n    if (loc === -1)\n      throw new Error(`program attr \"${name}\" not found in program \"${this.name}\"`);\n\n    this.gl.vertexAttribPointer(loc, ...args);\n    this.gl.enableVertexAttribArray(loc);\n    return this;\n  }\n\n  uniform(name, ...args) {\n    const { gl, uniforms, uniform_setters } = this;\n    const loc = uniforms[name];\n    if (loc === -1)\n      throw new Error(`program uniform \"${name}\" not found in program \"${this.name}\"`);\n\n    const setter = uniform_setters[name];\n    setter.call(this.gl, loc, ...args);\n    return this;\n  }\n\n  use() {\n    this.gl.useProgram(this.pid);\n    return this;\n  }\n\n  unuse() {\n    this.gl.useProgram(null);\n    return this;\n  }\n\n  static build_type_to_uniform_func_map(gl) {\n    // return {\n    //   [gl.FLOAT],\n    //   [gl.FLOAT_VEC2],\n    //   [gl.FLOAT_VEC3],\n    //   [gl.FLOAT_VEC4],\n    //   [gl.INT],\n    //   [gl.INT_VEC2],\n    //   [gl.INT_VEC3],\n    //   [gl.INT_VEC4],\n    //   [gl.BOOL],\n    //   [gl.BOOL_VEC2],\n    //   [gl.BOOL_VEC3],\n    //   [gl.BOOL_VEC4],\n    //   [gl.FLOAT_MAT2],\n    //   [gl.FLOAT_MAT3],\n    //   [gl.FLOAT_MAT4],\n    //   [gl.SAMPLER_2D],\n    //   [gl.SAMPLER_CUBE],\n    //   [gl.UNSIGNED_INT],\n    //   [gl.UNSIGNED_INT_VEC2],\n    //   [gl.UNSIGNED_INT_VEC3],\n    //   [gl.UNSIGNED_INT_VEC4],\n    //   [gl.FLOAT_MAT2x3],\n    //   [gl.FLOAT_MAT2x4],\n    //   [gl.FLOAT_MAT3x2],\n    //   [gl.FLOAT_MAT3x4],\n    //   [gl.FLOAT_MAT4x2],\n    //   [gl.FLOAT_MAT4x3],\n    //   [gl.SAMPLER_2D],\n    //   [gl.SAMPLER_3D],\n    //   [gl.SAMPLER_CUBE],\n    //   [gl.SAMPLER_2D_SHADOW],\n    //   [gl.SAMPLER_2D_ARRAY],\n    //   [gl.SAMPLER_2D_ARRAY_SHADOW],\n    //   [gl.SAMPLER_CUBE_SHADOW],\n    //   [gl.INT_SAMPLER_2D],\n    //   [gl.INT_SAMPLER_3D],\n    //   [gl.INT_SAMPLER_CUBE],\n    //   [gl.INT_SAMPLER_2D_ARRAY],\n    //   [gl.UNSIGNED_INT_SAMPLER_2D],\n    //   [gl.UNSIGNED_INT_SAMPLER_3D],\n    //   [gl.UNSIGNED_INT_SAMPLER_CUBE],\n    //   [gl.UNSIGNED_INT_SAMPLER_2D_ARRAY]\n    // }\n  }\n}\n\nclass Buffer {\n  \n}\n\n// export const GLUtil => gl => {\n\n//   class Shader {\n\n//   }\n\n//   class Program {\n\n//   }\n\n//   class Texture {\n\n//   }\n\n//   return new (class {\n//     buffer(buffer) {\n//       gl.bindBuffer(gl.ARRAY_BUFFER);\n//       return this;\n//     }\n\n//     program(program) {\n//       if (!program)\n//         gl.useProgram(null);\n//       else\n//         program.use();\n//       return this;\n//     }\n\n//     framebuffer(fbo) {\n//       gl.bindFramebuffer(fbo);\n//     }\n\n//     viewport(...args) {\n//       this.viewport = viewport;\n//     }\n\n//     clear(...args) {\n\n//     }\n//   })();\n// }\n\n/**\n * ref: http://stackoverflow.com/questions/32633585/how-do-you-convert-to-half-floats-in-javascript\n */\nexport const to_half = (function() {\n\n   var floatView = new Float32Array(1);\n   var int32View = new Int32Array(floatView.buffer);\n\n   /* This method is faster than the OpenEXR implementation (very often\n    * used, eg. in Ogre), with the additional benefit of rounding, inspired\n    * by James Tursa?s half-precision code. */\n   return function to_half(val) {\n\n     floatView[0] = val;\n     var x = int32View[0];\n\n     var bits = (x >> 16) & 0x8000; /* Get the sign */\n     var m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */\n     var e = (x >> 23) & 0xff; /* Using int is faster here */\n\n     /* If zero, or denormal, or exponent underflows too much for a denormal\n      * half, return signed zero. */\n     if (e < 103) {\n       return bits;\n     }\n\n     /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n     if (e > 142) {\n       bits |= 0x7c00;\n       /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n        * not Inf, so make sure we set one mantissa bit too. */\n       bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n       return bits;\n     }\n\n     /* If exponent underflows but not too much, return a denormal */\n     if (e < 113) {\n       m |= 0x0800;\n       /* Extra rounding may overflow and set mantissa to 0 and exponent\n        * to 1, which is OK. */\n       bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n       return bits;\n     }\n\n     bits |= ((e - 112) << 10) | (m >> 1);\n     /* Extra rounding. An overflow will set mantissa to 0 and increment\n      * the exponent, which is OK. */\n     bits += m & 1;\n     return bits;\n   };\n\n}());\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\\n\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nin float _u_target;\\n\\nuniform float u_dt;\\nuniform sampler2D u_pos_buf;\\nuniform sampler2D u_vel_buf;\\n\\nlayout(location = 0) out vec2 _pred_pos;\\n\\nvoid main() {\\n  vec2 pos = texture(u_pos_buf, vec2(_u_target, 0)).xy;\\n  vec2 vel = texture(u_vel_buf, vec2(_u_target, 0)).xy;\\n\\n  vec2 dp = (vel + vec2(0, -9.8f) * u_dt) * u_dt;\\n  // vec2 dp = (vel + vec2(0) * u_dt) * u_dt;\\n\\n  _pred_pos = pos + dp;\\n}\";","import pred_pos_vsrc from './shaders/pred-pos.vert';\nimport pred_pos_fsrc from './shaders/pred-pos.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => (() => {\n\n  let _pred_pos_prog;\n\n  function init() {\n    _pred_pos_prog = new Program(gl, 'pred-pos', pred_pos_vsrc, pred_pos_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui', \n        u_dt: '1f',\n        u_pos_buf: '1i', \n        u_vel_buf: '1i'\n      }\n    });\n\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _pred_pos_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_dt', sim.s_params.dt)\n      .uniform('u_pos_buf', 0)\n      .uniform('u_vel_buf', 1)\n      .unuse();\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.pred_pos._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pos.bind();\n    gl.activeTexture(gl.TEXTURE1);\n    sim.textures.vel.bind();\n\n    _pred_pos_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _pred_pos_prog.unuse();\n  }\n\n  return {\n    init,\n    exec\n  }\n})();\n","export default (gl, app, sim) => {\n\n  let _pos_buf;\n  let _counts;\n\n  let _bins;\n  let _bin_start;\n  let _bin_count;\n\n  function bin(x, y) {\n    let x_c = Math.trunc(x / sim.s_params.bin_size);\n    let y_c = Math.trunc(y / sim.s_params.bin_size);\n    return y_c * sim.s_params.x_bins + x_c;\n  }\n\n  function init() {\n    _pos_buf = new Float32Array(sim.num_particles * 4);\n    _counts = new Uint16Array(sim.s_params.num_bins);\n\n    _bins = new Uint32Array(sim.num_particles);\n    _bin_start = new Uint32Array(sim.s_params.num_bins);\n    _bin_count = new Uint32Array(sim.s_params.num_bins);\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.pred_pos._tex, 0);\n    gl.readPixels(0, 0, sim.num_particles, 1, gl.RGBA, gl.FLOAT, _pos_buf);\n\n    _bin_count.fill(0);\n    \n    let x;\n    let y;\n    let b;\n    for (let i = 0; i < sim.num_particles * 4; i += 4) {\n      x = _pos_buf[i];\n      y = _pos_buf[i + 1];\n      b = bin(x, y);\n      ++_bin_count[b];\n    }\n\n    _counts[0] = _bin_count[0];\n    _bin_start[0] = 0;\n    for (let i = 1; i < sim.s_params.num_bins; ++i) {\n      _counts[i] = _counts[i - 1] + _bin_count[i];\n      _bin_start[i] = _bin_start[i - 1] + _bin_count[i - 1];\n    }\n\n    for (let i = sim.num_particles - 1; i >= 0; --i) {\n      x = _pos_buf[4 * i];\n      y = _pos_buf[4 * i + 1];\n      b = bin(x, y);\n      _bins[--_counts[b]] = i;\n    }\n\n    sim.textures.bins.bind();\n    gl.texImage2D(gl.TEXTURE_2D, 0,\n                  gl.R32UI,\n                  sim.num_particles, 1,\n                  0,\n                  gl.RED_INTEGER, gl.UNSIGNED_INT,\n                  _bins);\n\n    sim.textures.bin_count.bind();\n    gl.texImage2D(gl.TEXTURE_2D, 0,\n                  gl.R32UI,\n                  sim.s_params.num_bins, 1,\n                  0,\n                  gl.RED_INTEGER, gl.UNSIGNED_INT,\n                  _bin_count);\n    \n    sim.textures.bin_start.bind();\n    gl.texImage2D(gl.TEXTURE_2D, 0,\n                  gl.R32UI,\n                  sim.s_params.num_bins, 1,\n                  0,\n                  gl.RED_INTEGER, gl.UNSIGNED_INT,\n                  _bin_start);\n  }\n\n  return {\n    init,\n    exec\n  };\n};","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform mediump uint u_num_particles;\\n\\nout float _u_target;\\nout float _id;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  _id = a_id;\\n\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\n#define PI 3.14159265358979323846264338327950288f\\n#define EPS_F 1e-23f\\n\\nin float _u_target;\\nin float _id;\\n\\nuniform uint u_num_particles;\\nuniform float u_kernel_r;\\nuniform float u_rest_density;\\nuniform float u_relaxation;\\nuniform float u_bin_size;\\nuniform uint u_x_bins;\\nuniform uint u_num_bins;\\n\\nuniform sampler2D u_pred_pos;\\nuniform mediump usampler2D u_bins;\\nuniform mediump usampler2D u_bin_count;\\nuniform mediump usampler2D u_bin_start;\\n\\nlayout(location = 0) out float _den;\\n\\nfloat poly6(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return 0.f;\\n  return (315.f / (64.f * PI * pow(u_kernel_r, 9.f))) * pow(u_kernel_r * u_kernel_r - r * r, 3.f);\\n}\\n\\nvec2 grad_spiky(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return vec2(0.f);\\n  return (-45.f / (PI * pow(u_kernel_r, 6.f))) * pow(u_kernel_r - r, 2.f) * normalize(ri);\\n}\\n\\nivec2 bin_index(vec2 pos) {\\n  uint x_c = uint(pos.x / u_bin_size);\\n  uint y_c = uint(pos.y / u_bin_size);\\n  return ivec2(x_c, y_c);\\n}\\n\\nuint bin(ivec2 bin_index) {\\n  return uint(bin_index.y) * u_x_bins + uint(bin_index.x);\\n}\\n\\nvoid main() {\\n  vec2 p_i = texture(u_pred_pos, vec2(_u_target, 0)).xy;\\n  ivec2 bin_index = bin_index(p_i);\\n\\n  uint id_i = uint(_id);\\n  vec2 target_j_id;\\n  uint id_j;\\n  vec2 target_j;\\n  vec2 p_j;\\n  vec2 grad_ci_pk;\\n\\n  vec2 grad_ci_pi = vec2(0.f);\\n  float density = 0.f;\\n  float denom = 0.f;\\n\\n  for (int i = -1; i <= 1; ++i) {\\n    for (int j = -1; j <= 1; ++j) {\\n      uint b = bin(bin_index + ivec2(i, j));\\n      vec2 bin_uv = vec2(float(b) / float(u_num_bins), 0.f);\\n      uint count = texture(u_bin_count, bin_uv).x;\\n      uint start = texture(u_bin_start, bin_uv).x;\\n\\n      for (uint k = start; k < start + count; ++k) {\\n        target_j_id = vec2(float(k) / float(u_num_particles), 0);\\n        id_j = texture(u_bins, target_j_id).x;\\n        target_j = vec2(float(id_j) / float(u_num_particles), 0);\\n        p_j = texture(u_pred_pos, target_j).xy;\\n\\n        // accumulate density\\n        density += poly6(p_i - p_j);\\n\\n        // accumulate denominator\\n        grad_ci_pk = grad_spiky(p_i - p_j);\\n        if (id_i != id_j)\\n          denom += dot(grad_ci_pk, grad_ci_pk);\\n        grad_ci_pi += grad_ci_pk;\\n      }\\n    }\\n  }\\n\\n  float num = density / u_rest_density - 1.f;\\n  denom += dot(grad_ci_pi, grad_ci_pi);\\n  _den = -num / (denom / pow(u_rest_density, 2.f) + u_relaxation);\\n}\";","import calc_lambda_vsrc from './shaders/calc-lambda.vert';\nimport calc_lambda_fsrc from './shaders/calc-lambda.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => {\n\n  let _calc_lambda_prog;\n\n  function init() {\n    _calc_lambda_prog = new Program(gl, 'calc-lambda', calc_lambda_vsrc, calc_lambda_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_kernel_r: '1f',\n        u_rest_density: '1f',\n        u_relaxation: '1f',\n        u_bin_size: '1f',\n        u_x_bins: '1ui',\n        u_num_bins: '1ui',\n        u_pred_pos: '1i',\n        u_bins: '1i',\n        u_bin_count: '1i',\n        u_bin_start: '1i'\n      }\n    });\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _calc_lambda_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_kernel_r', sim.s_params.kernel_r)\n      .uniform('u_rest_density', sim.s_params.rest_density)\n      .uniform('u_relaxation', sim.s_params.relaxation)\n      .uniform('u_bin_size', sim.s_params.bin_size)\n      .uniform('u_x_bins', sim.s_params.x_bins)\n      .uniform('u_num_bins', sim.s_params.num_bins)\n      .uniform('u_pred_pos', 0)\n      .uniform('u_bins', 1)\n      .uniform('u_bin_count', 2)\n      .uniform('u_bin_start', 3)\n      .unuse();\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.den._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pred_pos.bind();\n    gl.activeTexture(gl.TEXTURE1);\n    sim.textures.bins.bind();\n    gl.activeTexture(gl.TEXTURE2);\n    sim.textures.bin_count.bind();\n    gl.activeTexture(gl.TEXTURE3);\n    sim.textures.bin_start.bind();\n\n    _calc_lambda_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _calc_lambda_prog.unuse();\n  }\n\n  return {\n    init,\n    exec\n  };\n};\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform mediump uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\n#define PI 3.14159265358979323846264338327950288f\\n#define EPS_F 1e-23f\\n\\nin float _u_target;\\n\\nuniform uint u_num_particles;\\nuniform float u_kernel_r;\\nuniform float u_rest_density;\\nuniform float u_s_corr_dq_mult;\\nuniform float u_s_corr_k;\\nuniform float u_s_corr_n;\\nuniform float u_bin_size;\\nuniform uint u_x_bins;\\nuniform uint u_num_bins;\\nuniform sampler2D u_pred_pos;\\nuniform sampler2D u_lambda;\\nuniform mediump usampler2D u_bins;\\nuniform mediump usampler2D u_bin_count;\\nuniform mediump usampler2D u_bin_start;\\n\\nlayout(location = 0) out vec2 _d_pos;\\n\\nfloat poly6(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return 0.f;\\n  return (315.f / (64.f * PI * pow(u_kernel_r, 9.f))) * pow(u_kernel_r * u_kernel_r - r * r, 3.f);\\n}\\n\\nvec2 grad_spiky(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return vec2(0.f);\\n  return (-45.f / (PI * pow(u_kernel_r, 6.f))) * pow(u_kernel_r - r, 2.f) * normalize(ri);\\n}\\n\\nivec2 bin_index(vec2 pos) {\\n  uint x_c = uint(pos.x / u_bin_size);\\n  uint y_c = uint(pos.y / u_bin_size);\\n  return ivec2(x_c, y_c);\\n}\\n\\nuint bin(ivec2 bin_index) {\\n  return uint(bin_index.y) * u_x_bins + uint(bin_index.x);\\n}\\n\\nvoid main() {\\n  float lambda_i = texture(u_lambda, vec2(_u_target, 0)).x;\\n  vec2 p_i = texture(u_pred_pos, vec2(_u_target, 0)).xy;\\n  ivec2 bin_index = bin_index(p_i);\\n\\n  float s_corr_mult = -u_s_corr_k / pow(poly6(vec2(u_s_corr_dq_mult, 0)), u_s_corr_n);\\n\\n  uint b;\\n  vec2 target_j_id;\\n  uint id_j;\\n  vec2 target_j;  \\n\\n  float lambda_j;\\n  vec2 p_j;\\n  vec2 sum = vec2(0.f);\\n\\n  for (int i = -1; i <= 1; ++i) {\\n    for (int j = -1; j <= 1; ++j) {\\n      b = bin(bin_index + ivec2(i, j));\\n      vec2 bin_uv = vec2(float(b) / float(u_num_bins), 0.f);\\n      uint count = texture(u_bin_count, bin_uv).x;\\n      uint start = texture(u_bin_start, bin_uv).x;\\n\\n      for (uint k = start; k < start + count; ++k) {\\n        target_j_id = vec2(float(k) / float(u_num_particles), 0);\\n        id_j = texture(u_bins, target_j_id).x;\\n        target_j = vec2(float(id_j) / float(u_num_particles), 0);\\n\\n        lambda_j = texture(u_lambda, target_j).x;\\n        p_j = texture(u_pred_pos, target_j).xy;\\n\\n        vec2 r = p_i - p_j;\\n        float s_corr = s_corr_mult * pow(poly6(r), u_s_corr_n);\\n        // float s_corr = 0.f;\\n        sum += (lambda_i + lambda_j + s_corr) * grad_spiky(r);\\n      }\\n    }\\n  }\\n\\n  _d_pos = sum / u_rest_density;\\n}\";","import calc_dp_vsrc from './shaders/calc-dp.vert';\nimport calc_dp_fsrc from './shaders/calc-dp.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => {\n\n  let _calc_dp_prog;\n\n  function init() {\n    _calc_dp_prog = new Program(gl, 'calc-dp', calc_dp_vsrc, calc_dp_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_kernel_r: '1f',\n        u_rest_density: '1f',\n        u_s_corr_dq_mult: '1f',\n        u_s_corr_k: '1f',\n        u_s_corr_n: '1f',\n        u_bin_size: '1f',\n        u_x_bins: '1ui',\n        u_num_bins: '1ui',\n        u_pred_pos: '1i',\n        u_lambda: '1i',\n        u_bins: '1i',\n        u_bin_count: '1i',\n        u_bin_start: '1i'\n      }\n    });\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _calc_dp_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_kernel_r', sim.s_params.kernel_r)\n      .uniform('u_rest_density', sim.s_params.rest_density)\n      .uniform('u_s_corr_dq_mult', sim.s_params.s_corr_dq_mult)\n      .uniform('u_s_corr_k', sim.s_params.s_corr_k)\n      .uniform('u_s_corr_n', sim.s_params.s_corr_n)\n      .uniform('u_bin_size', sim.s_params.bin_size)\n      .uniform('u_x_bins', sim.s_params.x_bins)\n      .uniform('u_num_bins', sim.s_params.num_bins)\n      .uniform('u_pred_pos', 0)\n      .uniform('u_lambda', 1)\n      .uniform('u_bins', 2)\n      .uniform('u_bin_count', 3)\n      .uniform('u_bin_start', 4)\n      .unuse();\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.d_pos._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pred_pos.bind();\n    gl.activeTexture(gl.TEXTURE1);\n    sim.textures.den.bind();\n    gl.activeTexture(gl.TEXTURE2);\n    sim.textures.bins.bind();\n    gl.activeTexture(gl.TEXTURE3);\n    sim.textures.bin_count.bind();\n    gl.activeTexture(gl.TEXTURE4);\n    sim.textures.bin_start.bind();\n\n    _calc_dp_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _calc_dp_prog.unuse();\n  }\n\n  return {\n    init,\n    exec\n  };\n};\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nin float _u_target;\\n\\nuniform sampler2D u_pred_pos;\\nuniform sampler2D u_d_pos;\\n\\nlayout(location = 0) out vec2 _pred_pos;\\n\\nvec2 clamp_vec2(vec2 v, float x_min, float x_max, float y_min, float y_max) {\\n  return vec2(clamp(v.x, x_min, x_max), clamp(v.y, y_min, y_max));\\n}\\n\\nvoid main() {\\n  vec2 t = vec2(_u_target, 0);\\n  vec2 pred_pos = texture(u_pred_pos, t).xy;\\n  vec2 dp = texture(u_d_pos, t).xy;\\n  _pred_pos = clamp_vec2(pred_pos + dp, 0.1f, 3.9f, 0.f, 2.f);\\n}\";","import update_pred_pos_vsrc from './shaders/update-pred-pos.vert';\nimport update_pred_pos_fsrc from './shaders/update-pred-pos.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => (() => {\n\n  let _update_pred_pos_prog;\n\n  function init() {\n    _update_pred_pos_prog = new Program(gl, 'pred-pos-update', update_pred_pos_vsrc, update_pred_pos_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_pred_pos: '1i',\n        u_d_pos: '1i'\n      }\n    });\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _update_pred_pos_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_pred_pos', 0)\n      .uniform('u_d_pos', 1)\n      .unuse();\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n    const temp = sim.textures.temp;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, temp._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pred_pos.bind();\n    gl.activeTexture(gl.TEXTURE1);\n    sim.textures.d_pos.bind();\n\n    _update_pred_pos_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _update_pred_pos_prog.unuse();\n\n    sim.textures.temp = sim.textures.pred_pos;\n    sim.textures.pred_pos = temp;\n  }\n\n  return {\n    init,\n    exec\n  };\n})();\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform mediump uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nin float _u_target;\\n\\nuniform float u_dt;\\nuniform sampler2D u_pos_buf;\\nuniform sampler2D u_pred_pos_buf;\\n\\nlayout(location = 0) out vec2 _vel;\\n\\nvoid main() {\\n  vec2 uv = vec2(_u_target, 0);\\n  vec2 pos = texture(u_pos_buf, uv).xy;\\n  vec2 pred_pos = texture(u_pred_pos_buf, uv).xy;\\n  _vel = (pred_pos - pos) / u_dt;\\n}\";","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform mediump uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\n#define PI 3.14159265358979323846264338327950288f\\n#define EPS_F 1e-23f\\n\\nin float _u_target;\\n\\nuniform uint u_num_particles;\\nuniform float u_dt;\\nuniform float u_kernel_r;\\nuniform float u_vort_eps;\\nuniform float u_visc_c;\\nuniform float u_bin_size;\\nuniform uint u_x_bins;\\nuniform uint u_num_bins;\\n\\nuniform sampler2D u_pred_pos;\\nuniform sampler2D u_vel;\\nuniform mediump usampler2D u_bins;\\nuniform mediump usampler2D u_bin_count;\\nuniform mediump usampler2D u_bin_start;\\n\\nlayout(location = 0) out vec2 _vel;\\n\\nfloat poly6(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return 0.f;\\n  return (315.f / (64.f * PI * pow(u_kernel_r, 9.f))) * pow(u_kernel_r * u_kernel_r - r * r, 3.f);\\n}\\n\\nvec2 grad_spiky(vec2 ri) {\\n  float r = length(ri);\\n  if (r >= u_kernel_r || r < EPS_F)\\n    return vec2(0.f);\\n  return (-45.f / (PI * pow(u_kernel_r, 6.f))) * pow(u_kernel_r - r, 2.f) * normalize(ri);\\n}\\n\\nivec2 bin_index(vec2 pos) {\\n  uint x_c = uint(pos.x / u_bin_size);\\n  uint y_c = uint(pos.y / u_bin_size);\\n  return ivec2(x_c, y_c);\\n}\\n\\nuint bin(ivec2 bin_index) {\\n  return uint(bin_index.y) * u_x_bins + uint(bin_index.x);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(_u_target, 0);\\n  vec2 p_i = texture(u_pred_pos, uv).xy;\\n  vec2 v_i = texture(u_vel, uv).xy;\\n  ivec2 bin_index = bin_index(p_i);\\n\\n  uint b;\\n  vec2 bin_uv;\\n  uint count;\\n  uint start;\\n  vec2 target_j_id;\\n  uint id_j;\\n  vec2 target_j;  \\n  vec2 v_j;\\n\\n  vec2 p_j;\\n  vec3 w_i = vec3(0);\\n  vec3 p_cross = vec3(0);\\n  vec2 xsph_sum = vec2(0);\\n\\n  for (int i = -1; i <= 1; ++i) {\\n    for (int j = -1; j <= 1; ++j) {\\n      b = bin(bin_index + ivec2(i, j));\\n      bin_uv = vec2(float(b) / float(u_num_bins), 0);\\n      count = texture(u_bin_count, bin_uv).x;\\n      start = texture(u_bin_start, bin_uv).x;\\n\\n      for (uint k = start; k < start + count; ++k) {\\n        target_j_id = vec2(float(k) / float(u_num_particles), 0);\\n        id_j = texture(u_bins, target_j_id).x;\\n        target_j = vec2(float(id_j) / float(u_num_particles), 0);\\n\\n        p_j = texture(u_pred_pos, target_j).xy;\\n        v_j = texture(u_vel, target_j).xy;\\n\\n        vec2 r = p_i - p_j;\\n        vec2 v_ij = v_j - v_i;\\n\\n        w_i += cross(vec3(v_ij, 0), vec3(grad_spiky(r), 0));\\n        p_cross += vec3(0.5 * (p_i + p_j) - p_i, 0);\\n\\n        xsph_sum += poly6(r) * v_ij;\\n      }\\n    }\\n  }\\n\\n  vec3 n = normalize(p_cross - vec3(p_i, 0));\\n  vec3 f_vort = vec3(0);\\n  if (length(n) > EPS_F)\\n    f_vort = u_vort_eps * cross(n, w_i);\\n\\n  _vel = v_i + u_visc_c * xsph_sum + (u_dt * f_vort).xy;\\n}\";","import vel_update_vsrc from './shaders/update-vel.vert';\nimport vel_update_fsrc from './shaders/update-vel.frag';\nimport visc_vort_vsrc from './shaders/visc-vort.vert';\nimport visc_vort_fsrc from './shaders/visc-vort.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => (() => {\n\n  let _vel_update_prog;\n  let _visc_vort_prog;\n\n  function init() {\n    _vel_update_prog = new Program(gl, 'vel-update', vel_update_vsrc, vel_update_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_dt: '1f',\n        u_pos_buf: '1i',\n        u_pred_pos_buf: '1i'\n      }\n    });\n\n    _visc_vort_prog = new Program(gl, 'visc-vort', visc_vort_vsrc, visc_vort_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_dt: '1f',\n        u_kernel_r: '1f',\n        u_vort_eps: '1f',\n        u_visc_c: '1f',\n        u_bin_size: '1f',\n        u_x_bins: '1ui',\n        u_num_bins: '1ui',\n        u_pred_pos: '1i',\n        u_vel: '1i',\n        u_bins: '1i',\n        u_bin_count: '1i',\n        u_bin_start: '1i'\n      }\n    })\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _vel_update_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_dt', sim.s_params.dt)\n      .uniform('u_pos_buf', 0)\n      .uniform('u_pred_pos_buf', 1)\n      .unuse();\n\n    _visc_vort_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_dt', sim.s_params.dt)\n      .uniform('u_kernel_r', sim.s_params.kernel_r)\n      .uniform('u_vort_eps', sim.s_params.vort_eps)\n      .uniform('u_visc_c', sim.s_params.visc_c)\n      .uniform('u_bin_size', sim.s_params.bin_size)\n      .uniform('u_x_bins', sim.s_params.x_bins)\n      .uniform('u_num_bins', sim.s_params.num_bins)\n      .uniform('u_pred_pos', 1)\n      .uniform('u_vel', 2)\n      .uniform('u_bins', 3)\n      .uniform('u_bin_count', 4)\n      .uniform('u_bin_start', 5)\n      .unuse();\n  }\n\n  function exec() {\n    let fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.vel._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pos.bind();\n    gl.activeTexture(gl.TEXTURE1);\n    sim.textures.pred_pos.bind();\n\n    _vel_update_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _vel_update_prog.unuse();\n\n    const temp = sim.textures.temp;\n    fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, temp._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE2);\n    sim.textures.vel.bind();\n    gl.activeTexture(gl.TEXTURE3);\n    sim.textures.bins.bind();\n    gl.activeTexture(gl.TEXTURE4);\n    sim.textures.bin_count.bind();\n    gl.activeTexture(gl.TEXTURE5);\n    sim.textures.bin_start.bind();\n\n    _visc_vort_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _visc_vort_prog.unuse();\n\n    sim.textures.temp = sim.textures.vel;\n    sim.textures.vel = temp;\n  }\n\n  return {\n    init,\n    exec\n  };\n})();\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform uint u_num_particles;\\n\\nout float _u_target;\\n\\nvoid main() {\\n  _u_target = a_id / float(u_num_particles);\\n  gl_Position = vec4(2.f * (_u_target - 0.5f), 0, 0, 1.f);\\n  gl_PointSize = 1.f;\\n}\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nin float _u_target;\\n\\nuniform sampler2D u_pred_pos_buf;\\n\\nlayout(location = 0) out vec2 _pos;\\n\\nvoid main() {\\n  vec2 pos = texture(u_pred_pos_buf, vec2(_u_target, 0)).xy;\\n  _pos = pos;\\n}\";","import pos_update_vsrc from './shaders/update-pos.vert';\nimport pos_update_fsrc from './shaders/update-pos.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => (() => {\n\n  let _pos_update_prog;\n\n  function init() {\n    _pos_update_prog = new Program(gl, 'pos-update', pos_update_vsrc, pos_update_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui',\n        u_pred_pos_buf: '1i'\n      }\n    });\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _pos_update_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_pred_pos_buf', 0)\n      .uniform('u_num_particles', sim.num_particles)\n      .unuse();\n  }\n\n  function exec() {\n    const fb = sim.swap_fbo();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, sim.textures.pos._tex, 0);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pred_pos.bind();\n\n    _pos_update_prog.use();\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, sim.num_particles, 1);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _pos_update_prog.unuse();\n  }\n\n  return {\n    init,\n    exec\n  };\n})();\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\nlayout(location = 0) in float a_id;\\n\\nuniform uint u_num_particles;\\nuniform mediump float u_radius;\\nuniform sampler2D u_pos_buf;\\nuniform mediump mat4 u_view;\\nuniform mediump mat4 u_proj;\\nuniform uint u_vpheight;\\n\\nout vec3 _pos;\\nflat out float _id;\\n\\nvoid main() {\\n  vec2 in_pos = texture(u_pos_buf, vec2(a_id / float(u_num_particles), 0)).xy;\\n  vec4 pos = vec4(in_pos, 0.f, 1.f);\\n  gl_Position = u_proj * u_view * pos;\\n  gl_PointSize = float(u_vpheight) * u_proj[1][1] * u_radius / gl_Position.w;\\n\\n  _pos = pos.xyz;\\n  _id = a_id;\\n}\\n\";","module.exports=\"#version 300 es\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nin vec3 _pos;\\nflat in float _id;\\n\\nuniform float u_radius;\\nuniform vec3 u_camera;\\nuniform mediump mat4 u_view;\\nuniform mediump mat4 u_proj;\\n\\nout vec4 f_color;\\n\\nconst vec3 ambient = vec3(0.05f, 0.2f, 0.3f);\\nconst vec3 color = vec3(0.15f, 0.65f, 1.f);\\n\\nvoid main() {\\n  vec3 n;\\n  n.xy = 2.f * gl_PointCoord.st - vec2(1.f);\\n  n.y = -n.y;\\n  float r2 = length(n.xy);\\n  if (r2 > 1.f)\\n    discard;\\n  n.z = sqrt(1.f - r2);\\n\\n  vec4 pos = vec4((u_view * vec4(_pos, 1.f)).xyz + n * u_radius, 1.f);\\n  vec4 clip_pos = u_proj * pos;\\n  float depth = (1.f + clip_pos.z / clip_pos.w) / 2.f;\\n  gl_FragDepth = gl_DepthRange.near + gl_DepthRange.diff * depth;\\n\\n  vec4 lpos_view = u_view * vec4(u_camera.x - 1.f, u_camera.y + 0.5f, 1.f, 1.f);\\n  float diffuse = clamp(dot(n, lpos_view.xyz - pos.xyz), 0.f, 1.f);\\n\\n  f_color = vec4(ambient + diffuse * color.xyz, 1.f);\\n}\";","import { mat4, vec3 } from 'gl-matrix';\nimport render_vsrc from './shaders/render.vert';\nimport render_fsrc from './shaders/render.frag';\nimport { Program } from '~/src/gl-util';\n\nexport default (gl, app, sim) => (() => {\n\n  let _render_prog;\n  let _mat_view;\n  let _mat_proj;\n\n  function init() {\n    _mat_view = mat4.create();\n    const target_x = sim.r_params.width / 2;\n    const target_y = sim.r_params.height / 2;\n    const camera = vec3.fromValues(target_x, target_y, 3)\n\n    mat4.lookAt(_mat_view, \n                camera, \n                vec3.fromValues(target_x, target_y, 0), \n                vec3.fromValues(0, 1, 0));\n\n    _mat_proj = mat4.create();\n    mat4.perspective(_mat_proj,\n                   45 * Math.PI / 180,                              // fov in radians\n                   gl.canvas.clientWidth / gl.canvas.clientHeight,  // aspect    \n                   0.1,                                             // z-near\n                   100);                                            // z-far\n\n    _render_prog = new Program(gl, 'render', render_vsrc, render_fsrc, {\n      attrs: ['a_id'],\n      uniforms: {\n        u_num_particles: '1ui', \n        u_pos_buf: '1i', \n        u_radius: '1f', \n        u_vpheight: '1ui',\n        u_view: 'Matrix4fv',\n        u_proj: 'Matrix4fv',\n        u_camera: '3fv'\n      }\n    });\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sim.buffers.particle_ids);\n    _render_prog.attr('a_id', 1, gl.UNSIGNED_SHORT, false, 0, 0)\n      .use()\n      .uniform('u_pos_buf', 0)\n      .uniform('u_radius', app.is_mac ? sim.r_params.radius * 2 : sim.r_params.radius)\n      .uniform('u_num_particles', sim.num_particles)\n      .uniform('u_vpheight', gl.canvas.height)\n      .uniform('u_camera', camera)\n      .uniform('u_view', false, _mat_view)\n      .uniform('u_proj', false, _mat_proj)\n      .unuse();\n  }\n\n  function exec() {\n    const { canvas, input, is_mac, renderer } = app;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    gl.activeTexture(gl.TEXTURE0);\n    sim.textures.pos.bind();\n\n    _render_prog.use();\n    gl.clearColor(0.2, 0.2, 0.2, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    gl.drawArrays(gl.POINTS, 0, sim.num_particles);\n    _render_prog.unuse();\n  }\n\n  return {\n    init,\n    exec\n  };\n})();\n","import { Texture, to_half } from '~/src/gl-util';\nimport s1_pred_pos from './steps/s1-pred-pos';\nimport s2_jank_frnn from './steps/s2-jank-frnn';\nimport s3_calc_lambda from './steps/s3-calc-lambda';\nimport s4_calc_dp from './steps/s4-calc-dp';\nimport s5_update_pred_pos from './steps/s5-update-pred-pos';\nimport s6_update_vel from './steps/s6-update-vel';\nimport s7_update_pos from './steps/s7-update-pos';\nimport s8_render_particles from './steps/s8-render-particles';\n\nexport default (app, gl) => class PBDSimulation {\n  constructor(opts={}) {\n    this.next_id = -1;\n    this.particles = [];\n    this.params_dirty = false;\n\n    this.framebuffer = 1;\n    this.framebuffers = [];\n\n    this.s_params = {\n      dt: 0.0083,\n      kernel_r: 0.1,\n      bin_size: 0.1,\n      rest_density: 8000,\n      relaxation: 1000,\n      s_corr_dq_mult: 0.01,\n      s_corr_k: 0.0002,\n      s_corr_n: 3,\n      vort_eps: 0.00008,\n      visc_c: 0.000001,\n      x_bins: 0,\n      y_bins: 0,\n      num_bins: 0\n    };\n\n    this.r_params = {\n      height: 2,\n      width: 4,\n      radius: 0.1\n    };\n\n    this.buffers = {\n      particle_ids: null\n    };\n\n    this.textures = {\n      pos: null,                // position\n      vel: null,                // velocity \n      pred_pos: null,           // predicted position\n      d_pos: null,              // change in position\n      den: null,                // density lambda\n      temp: null,               // temporary storage\n      bins: null,               // particle ids sorted by bin id\n      bin_start: null,          // bin id -> index in `bins` texture\n      bin_count: null           // bin id -> number of entries in bin\n    };\n    \n    this.steps = {\n      pred_pos: s1_pred_pos(gl, app, this),\n      jank_frnn: s2_jank_frnn(gl, app, this),\n      calc_lambda: s3_calc_lambda(gl, app, this),\n      calc_dp: s4_calc_dp(gl, app, this),\n      update_pred_pos: s5_update_pred_pos(gl, app, this),\n      update_vel: s6_update_vel(gl, app, this),\n      update_pos: s7_update_pos(gl, app, this),\n      render_particles: s8_render_particles(gl, app, this)\n    }\n\n    this.init();\n  }\n\n  init() {\n    this.compute_bounds();\n    const positions = this.generate_particles({ \n      w: 2, h: 2,\n      o_x: this.r_params.width / 2, \n      o_y: this.r_params.height / 2, \n      d_x: 30, d_y: 20\n    });\n\n    app.info = { ...app.info, particles: this.num_particles };\n\n    this.init_buffers();\n    this.init_textures(positions);\n    this.init_programs();\n    this.init_framebuffers();\n  }\n\n  generate_particles({ o_x=0, o_y=0, w=1, h=1, d_x=10, d_y=10 }) {\n    const positions = [];\n    const num_w_particles = w * d_x;\n    const num_h_particles = h * d_y;\n    const offset_x = w / num_w_particles;\n    const offset_y = h / num_h_particles;\n\n    for (let i = -num_w_particles / 2; i < num_w_particles / 2; ++i) {\n      for (let j = -num_h_particles / 2; j < num_h_particles / 2; ++j) {\n        positions.push(o_x + i * offset_x, o_y + j * offset_y);\n        this.particles.push(++this.next_id);\n      }\n    }\n\n    return positions;\n  }\n\n  compute_bounds() {\n    const { bin_size } = this.s_params;\n    const { height, width } = this.r_params;\n\n    const y_bins = Math.ceil(height / bin_size);\n    const x_bins = Math.ceil(width / bin_size);\n\n    this.s_params.y_bins = y_bins;\n    this.s_params.x_bins = x_bins;\n    this.s_params.num_bins = y_bins * x_bins;\n  }\n\n  init_buffers() {\n    this.buffers.particle_ids = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffers.particle_ids);\n    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(this.particles), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  init_programs() {\n    this.steps.pred_pos.init();\n    this.steps.jank_frnn.init();\n    this.steps.calc_lambda.init();\n    this.steps.calc_dp.init();\n    this.steps.update_pred_pos.init();\n    this.steps.update_vel.init();\n    this.steps.update_pos.init();\n    this.steps.render_particles.init();\n  }\n\n  init_textures(positions) {\n    const pos = new Texture(gl, 0, \n                            gl.RG32F, \n                            this.num_particles, 1, \n                            0, \n                            gl.RG, gl.FLOAT, \n                            new Float32Array(positions));\n\n    const vel = new Texture(gl, 0,\n                            gl.RG32F,\n                            this.num_particles, 1,\n                            0,\n                            gl.RG, gl.FLOAT,\n                            new Float32Array(this.num_particles * 2));\n\n    const pred_pos = new Texture(gl, 0,\n                                 gl.RG32F,\n                                 this.num_particles, 1,\n                                 0,\n                                 gl.RG, gl.FLOAT,\n                                 null);\n\n    const bins = new Texture(gl, 0,\n                             gl.R32UI,\n                             this.num_particles, 1,\n                             0,\n                             gl.RED_INTEGER, gl.UNSIGNED_INT,\n                             null);\n\n    const bin_count = new Texture(gl, 0,\n                                  gl.R32UI,\n                                  this.s_params.num_bins, 1,\n                                  0,\n                                  gl.RED_INTEGER, gl.UNSIGNED_INT,\n                                  null);\n\n    const bin_start = new Texture(gl, 0,\n                                  gl.R32UI,\n                                  this.s_params.num_bins, 1,\n                                  0,\n                                  gl.RED_INTEGER, gl.UNSIGNED_INT,\n                                  null);\n\n    const den = new Texture(gl, 0,\n                            gl.R32F,\n                            this.num_particles, 1,\n                            0,\n                            gl.RED, gl.FLOAT,\n                            null);\n\n    const d_pos = new Texture(gl, 0,\n                              gl.RG32F,\n                              this.num_particles, 1,\n                              0,\n                              gl.RG, gl.FLOAT,\n                              null);\n\n    const temp = new Texture(gl, 0,\n                             gl.RG32F,\n                             this.num_particles, 1,\n                             0,\n                             gl.RG, gl.FLOAT,\n                             null);\n    \n    this.textures.pos = pos;\n    this.textures.vel = vel;\n    this.textures.pred_pos = pred_pos;\n    this.textures.bins = bins;\n    this.textures.bin_count = bin_count;\n    this.textures.bin_start = bin_start;\n    this.textures.den = den;\n    this.textures.d_pos = d_pos;\n    this.textures.temp = temp;\n  }\n\n  init_framebuffers() {\n    this.framebuffers.push(gl.createFramebuffer());\n    this.framebuffers.push(gl.createFramebuffer());\n  }\n\n  swap_fbo() {\n    this.framebuffer = 1 - this.framebuffer;\n    return this.framebuffers[this.framebuffer];\n  }\n\n  step(dt) {\n    if (this.reset_pending) {\n      this.reset();\n      return;\n    }\n    this.steps.pred_pos.exec();\n    this.steps.jank_frnn.exec();\n\n    for (let i = 0; i < 3; ++i) {\n      this.steps.calc_lambda.exec();\n      this.steps.calc_dp.exec();\n      this.steps.update_pred_pos.exec();\n    }\n\n    this.steps.update_vel.exec();\n    this.steps.update_pos.exec();\n  }\n\n  render() {\n    this.steps.render_particles.exec();\n  }\n\n  reset() {\n    this.next_id = -1;\n    this.particles.length = 0;\n    const positions = this.generate_particles({ \n      w: 2, h: 2,\n      o_x: this.r_params.width / 2, \n      o_y: this.r_params.height / 2, \n      d_x: 30, d_y: 20\n    });\n\n    this.textures.pos.bind();\n    gl.texImage2D(gl.TEXTURE_2D, 0, \n                  gl.RG32F, \n                  this.num_particles, 1, \n                  0, \n                  gl.RG, gl.FLOAT, \n                  new Float32Array(positions));\n\n    this.textures.vel.bind();\n    gl.texImage2D(gl.TEXTURE_2D, 0,\n                  gl.RG32F,\n                  this.num_particles, 1,\n                  0,\n                  gl.RG, gl.FLOAT,\n                  new Float32Array(this.num_particles * 2));\n\n    this.render();\n  }\n\n  get num_particles() {\n    return this.particles.length;\n  }\n};\n","export default app => class InfoBox {\n  constructor() {\n    const div = document.createElement('div');\n    div.setAttribute('id', 'info-box');\n\n    div.style.position = 'fixed';\n    div.style.top = 0;\n    div.style.left = 0;\n    div.style.border = '1px solid white';\n    div.style.color = 'white';\n    div.style.padding = '0.4em';\n    div.style.fontSize = '0.8em';\n\n    document.body.appendChild(div);\n\n    const pause_button = document.createElement('button');\n    pause_button.innerHTML = 'start';\n    pause_button.setAttribute('id', 'pause');\n    div.appendChild(pause_button);\n\n    const reset_button = document.createElement('button');\n    reset_button.innerHTML = 'reset';\n    reset_button.setAttribute('id', 'reset');\n    div.appendChild(reset_button);\n\n    const info = document.createElement('div');\n    div.appendChild(info);\n\n    this.div = div;\n    this.pause_button = pause_button;\n    this.info_elem = info;\n    this._info = {};\n\n    this.on_pause = this.on_pause.bind(this);\n    pause_button.addEventListener('click', this.on_pause);\n\n    this.on_reset = this.on_reset.bind(this);\n    reset_button.addEventListener('click', this.on_reset)\n  }\n\n  on_pause() {\n    if (app.paused) {\n      this.pause_button.innerHTML = 'pause';\n      app.run();\n    } else {\n      this.pause_button.innerHTML = 'resume';\n      app.pause();\n    }\n  }\n\n  sync() {\n    if (app.paused)\n      this.pause_button.innerHTML = 'resume';\n    else\n      this.pause_button.innerHTML = 'pause';\n  }\n\n  on_reset() {\n    !app.reset_pending && app.reset();\n  }\n\n  get info() {\n    return this._info;\n  }\n\n  set info(i) {\n    this._info = i;\n    this.info_elem.innerHTML = `<pre>${JSON.stringify(i, null, 2)}</pre>`;\n  }\n}\n","/**\n * Render Loop Manager\n */\nexport default (app, gl) => class Renderer { \n  constructor() {\n    this.running = false;\n    this.avg_fps = 0;\n    this.t_curr = 0;\n    this.t_last = 0;\n\n    this.on_frame = this.on_frame.bind(this);\n    this.on_resize = this.on_resize.bind(this);\n  }\n\n  init() {\n    gl.getExtension('EXT_color_buffer_float');\n\n    gl.clearDepth(1.0);\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LEQUAL);\n\n    window.addEventListener('resize', this.on_resize);\n  }\n\n  start() {\n    this.running = true;\n    window.requestAnimationFrame(this.on_frame);\n  }\n\n  on_frame(t) {\n    if (!this.running)\n      return;\n\n    this.t_last = this.t_curr;\n    this.t_curr = t;\n    const dt = t - this.t_last;\n\n    this.avg_fps = (1000 / dt + this.avg_fps) * 0.5;\n\n    app.sim.step(dt);\n    app.sim.render();\n\n    window.requestAnimationFrame(this.on_frame);\n  }\n\n  on_resize() {\n    const { canvas, is_mac } = app;\n    if (is_mac) {\n      canvas.height = 2 * canvas.clientHeight;\n      canvas.width = 2 * canvas.clientWidth;\n    } else {\n      canvas.height = canvas.clientHeight;\n      canvas.width = canvas.clientWidth;\n    }\n  }\n\n  pause() {\n    this.running = false;\n  }\n\n  destroy() {\n\n  }\n};\n","import InputManager from './input-manager';\nimport PBDSimulation from './sim';\nimport InfoBox from './ui-interface';\nimport Renderer from './renderer';\n\nexport default class PBDApplication {\n  constructor(canvas) {\n    this.canvas = document.getElementById(canvas);\n    if (!this.canvas)\n      throw new Error('canvas element not found');\n\n    this.initialized = false;\n    this.paused = true;\n    this.is_mac = /mac/i.test(window.navigator.platform);\n\n    this.gl = null;\n    this.sim = null;\n    this.renderer = null;\n\n    this.input = new InputManager();\n    this.info_box = new (InfoBox(this))();\n\n    this.sample_performance = this.sample_performance.bind(this);\n    this.on_mousemove = this.on_mousemove.bind(this);\n\n    this.input.on('mousemove', this.on_mousemove);\n  }\n\n  init() {\n    this.info_box.info = { state: 'initializing...' };\n\n    const gl = this.canvas.getContext(\"webgl2\");\n    if (!gl)\n      throw new Error('webgl context could not be created');\n\n    this.gl = gl;\n    \n    this.sim = new (PBDSimulation(this, gl))();\n    this.renderer = new (Renderer(this, gl))();\n\n    this.renderer.init();\n    this.renderer.on_resize();\n\n    this.initialized = true;\n    this.info = { ...this.info, state: 'initialized' };\n\n    this.sim.render();\n  }\n\n  on_mousemove(input) {\n    this.info = { ...this.info, mouse: `${input.mouse.x}, ${input.mouse.y}` };\n  }\n\n  run() {\n    if (!this.initialized)\n      throw new Error('application has not been initialized');\n\n    this.paused = false;\n    this.info = { ...this.info, state: 'running' };\n\n    this.renderer.start();\n\n    window.setTimeout(this.sample_performance, 1000);\n  }\n\n  sample_performance() {\n    if (!this.renderer.running)\n      return;\n\n    const dt = this.t - this.tLast;\n    this.info = { ...this.info, fps: `${this.renderer.avg_fps.toFixed(2)} fps` };\n\n    window.setTimeout(this.sample_performance, 1000);\n  }\n\n  pause() {\n    this.info = { \n      ...this.info,\n      state: 'paused'\n    };\n    delete this.info.fps;\n    this.renderer.pause();\n    this.paused = true;\n  }\n\n  reset() {\n    this.pause();\n    this.sim.reset();\n    this.info_box.sync();\n  }\n\n  get reset_pending() {\n    return this.sim.reset_pending;\n  }\n\n  get info() {\n    return this.info_box.info;\n  }\n\n  set info(info) {\n    this.info_box.info = info;\n  }\n}","import PBDApplication from './app';\n\nfunction main() {\n  const app = new PBDApplication('view');\n\n  app.init();\n}\n\nmain();\n"]}